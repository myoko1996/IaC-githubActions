
name: "Terraform Workflows Infra Management"
run-name: "${{ github.actor }} running on a PR or merge üöÄ"

on:
  push:
    branches: [ dev, staging, main ]  # When PRs are merged, run terraform apply
    paths:
      - 'terraform/**'  # Only trigger on changes within the 'terraform/' folder, remove to trigger on every build
  
  pull_request:
    branches: [ dev, staging, main ]  # For new / updated PRs, only run terraform plan
    paths:
      - 'terraform/**'  # Only trigger on changes within the 'terraform/' folder, remove to trigger on every build

permissions:
  id-token: write  # Only trigger on changes within the 'terraform/' folder, remove to trigger on every build
  contents: read  # This is required for actions/checkout

env:
  TF_ROOT: 'terraform'
  AWS_REGION: 'us-west-2'
  # Ensure Terraform CLI behaves consistently
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # Prevent concurrent runs of the same workflow on the same branch
    concurrency:
      group: terraform-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "${{ secrets.TF_VERSION }}"

    - name: Cache Terraform
      uses: actions/cache@v4
      with:
        path: ${{ env.TF_ROOT }}/.terraform
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/terraform.lock.hcl') }}
        restore-keys: |
          ${{ runner.os }}-terraform-

    - name: Configure AWS Credentials for Plan
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets['AWS_IAM_ROLE_PLAN_' + github.ref_name.toUpperCase()] }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 1800  # 30 minutes

    - name: Initialize Terraform
      id: init
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        ENVIRONMENT=${{ github.ref_name }}
        echo "Initializing Terraform for ${ENVIRONMENT} environment"
        terraform init \
          -backend-config=backend-${ENVIRONMENT}.tf \
          -no-color
      working-directory: ${{ env.TF_ROOT }}
      continue-on-error: true

    - name: Format Check
      id: fmt
      run: |
        terraform fmt -check -recursive -no-color
      working-directory: ${{ env.TF_ROOT }}
      continue-on-error: true

    - name: Validate Configuration
      id: validate
      run: |
        terraform validate -no-color
      working-directory: ${{ env.TF_ROOT }}
      continue-on-error: true

    - name: Generate Plan
      id: plan
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        terraform plan -no-color -out=tfplan 2> error.log || export PLAN_EXIT_CODE=$?
        
        if [ $PLAN_EXIT_CODE -eq 1 ]; then
          TERRAFORM_ERRORS=$(cat error.log)
          
          # Ensure to use a string that won't occur in the output
          echo "plan_output<<ABCDEFGH" >> $GITHUB_OUTPUT
          echo "## Terraform Plan" >> $GITHUB_OUTPUT
          echo "<details><summary>Show Errors</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_ERRORS" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "ABCDEFGH" >> $GITHUB_OUTPUT
          exit 1
        else
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          # Ensure to use a string that won't occur in the output
          echo "plan_output<<ABCDEFGH" >> $GITHUB_OUTPUT
          echo "## Terraform Plan" >> $GITHUB_OUTPUT
          echo "<details><summary>Show Plan</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '\`\`\`' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "ABCDEFGH" >> $GITHUB_OUTPUT

          exit 0
        fi
      working-directory: ${terraform_source_dir}
      continue-on-error: true

    # Write the status of prior steps as a comment on the PR
    - name: Update PR with plan output and build status
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: $${{ secrets.GH_TOKEN }}
        script: |
          const build_summary = `|Step|Status|
            |:---|:---|
            |üñå - Format and Style|\`$${{ steps.fmt.outcome }}\`|"
            |‚öôÔ∏è - Initialization|\`$${{ steps.init.outcome }}\`|"
            |ü§ñ - Validation|\`$${{ steps.validate.outcome }}\`|"
            |üìñ - Plan|\`$${{ steps.plan.outcome }}\`|`;

          const plan_output = `$${{ steps.plan.outputs.plan_output }}`;

          const commit_details = `*Pusher: @$${{ github.actor }}, Action: \`$${{ github.event_name }}\`, Workflow: \`$${{ github.workflow }}\`*`;

          // Build the output message
          const output = `$${build_summary}\n\n$${plan_output}\n\n$${commit_details}`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
          

    # After posting the PR output / status as a comment, exit with failure if any step failed
    - name: Exit based on status of fmt, init, and validate
      if: steps.init.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure'
      run: |
        echo Init: $${{ steps.init.outcome }}
        echo Format: $${{ steps.fmt.outcome }}
        echo Validate: $${{ steps.validate.outcome }}
        exit 1

    - name: Configure AWS Credentials for Apply
      if: |
        github.ref == 'refs/heads/dev' && github.event_name == 'push' ||
        github.ref == 'refs/heads/staging' && github.event_name == 'push' ||
        github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets['AWS_IAM_ROLE_APPLY_' + github.ref_name.toUpperCase()] }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 1800

    - name: Apply Changes
      if: |
        github.ref == 'refs/heads/dev' && github.event_name == 'push' ||
        github.ref == 'refs/heads/staging' && github.event_name == 'push' ||
        github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        echo "Applying changes to ${{ github.ref_name }} environment"
        terraform apply -auto-approve -input=false -no-color tfplan
      working-directory: ${{ env.TF_ROOT }}